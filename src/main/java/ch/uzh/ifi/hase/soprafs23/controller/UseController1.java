package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.example.accessingdatamysql.UserService;

import java.util.Date;

@Controller	// This means that this class is a Controller // entity mapping
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	private final UserService userService;

	MainController(UserService userService) {
		this.userService = userService;
	}
	@Autowired // This means to get the bean called userRepository
			   // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@PostMapping(path="/add") // Map ONLY POST Requests
	public @ResponseBody String addNewUser (@RequestParam String name
			, @RequestParam String password) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = userService.createUser(name, password);


		//userRepository.save(n);
		return "Saved";
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@PutMapping (path="/update/{id}") // Map ONLY PUT Requests
	public @ResponseBody String updateUser (@RequestParam String newPassword
			, @PathVariable Integer id) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		userService.updateUserPassword(newPassword,id);


		//userRepository.save(n);
		return "Updated";
	}

	@DeleteMapping("/users/{id}")
	@ResponseStatus(HttpStatus.OK)
	public String deleteUserById(@PathVariable Integer id) {
		userService.deleteUserById(id);
		return "deleted";
	}



}
