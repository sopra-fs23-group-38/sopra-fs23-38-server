package ch.uzh.ifi.hase.soprafs23.service;

import ch.uzh.ifi.hase.soprafs23.Uills.auxiliary;
import ch.uzh.ifi.hase.soprafs23.constant.UserStatus;
import ch.uzh.ifi.hase.soprafs23.entity.User;
import ch.uzh.ifi.hase.soprafs23.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;
import ch.uzh.ifi.hase.soprafs23.Verify.UserVerifier;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.sql.Timestamp;
import java.util.*;

/**
 * User Service
 * This class is the "worker" and responsible for all functionality related to
 * the user
 * (e.g., it creates, modifies, deletes, finds). The result will be passed back
 * to the caller.
 */
@Service
@Transactional
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private UserVerifier userVerifier;

    public String doRegister(HttpServletRequest request, HttpServletResponse response) {
        Map<String, String> resultMap = new HashMap<>();

       if (request.getParameter("username") == null
                || userRepository.findByUsername(request.getParameter("username")) != null) {
            resultMap.put("success", "false");
            resultMap.put("reason", "This username is already created.");
        } else {
            User newUser = new User();
            newUser.setUsername(request.getParameter("username"));
            newUser.setPassword(request.getParameter("password"));
            newUser.setEmail(request.getParameter("email"));
            newUser.setRegister_time(new Timestamp(System.currentTimeMillis()));
            newUser.setHasNew(false);

            userRepository.save(newUser);
            resultMap.put("success", "true");

            response.addCookie(signToken(userRepository.findIdByUsername(request.getParameter("username"))));
        }
        return auxiliary.mapToJson(resultMap);
    }


    @Transactional
    public String doLogin(String username,
                          String password,
                          HttpServletRequest request,
                          HttpServletResponse response) {
        Map<String, Object> resultMap = new HashMap<>();

        resultMap.put("success","false");


        List<User> user_list;
        boolean isLoginSuccess = false;

        if((user_list = userRepository.loginWithUsername(username, password)).size() == 1) {
            isLoginSuccess = true;
        }

        if(isLoginSuccess) {
            resultMap.put("success", "true");
            resultMap.put("user", user_list.get(0));
            Cookie cookie = signToken(user_list.get(0).getId());
            response.addCookie(cookie);
            resultMap.put("token", cookie.getValue());
        }
        else{
            resultMap.put("reason","The username and password does not match.");
        }
        return auxiliary.mapToJson(resultMap);
    }

    /**
     * @param userId
     * @return
     */
    private Cookie signToken(Integer userId) {
        String token = String.format("U%s", userId * 3); //TokenUtils.sign(userId);
        Cookie tokenCookie = new Cookie("token", token);
        tokenCookie.setMaxAge(365 * 24 * 60 * 60);
        tokenCookie.setPath("/");
        return tokenCookie;
    }

}
